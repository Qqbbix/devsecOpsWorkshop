before_script:
  - docker login -u $DOCKER_USER -p $DOCKER_PASSWORD $DOCKER_REGISTRY
  - DOCKER_IMAGE="$DOCKER_REGISTRY/devops-exam/teamk1/${CI_PROJECT_NAME,,}"
  - if [ -z "$CI_COMMIT_TAG" ]; then
    ARG_APP_VERSION="0.$CI_PIPELINE_ID.0-dev";
    else
    ARG_APP_VERSION="$CI_COMMIT_TAG";
    fi

stages:
  - test
  - build
  - delivery
  - release
  - cleanup

quality:
  stage: test
  script:
    - mkdir coverage-reports
    - docker build -t $CI_PROJECT_NAME:test -f Dockerfile.dev .
    - docker run --rm -v "$(pwd)/coverage-reports/":/report/  -e DB_USERNAME=user -e DB_PASSWORD=userx -e DB_HOST=db $CI_PROJECT_NAME:test sh -c "npm run coverage && cp ./coverage/lcov.info /report/"
    - sonar-scanner
      -Dsonar.sources=src
      -Dsonar.host.url=$SONAR_HOST
      -Dsonar.login=$SONAR_TOKEN
      -Dsonar.projectKey=teamK1-$CI_PROJECT_NAME
      -Dsonar.projectName="devops-exam / teamk1 / $CI_PROJECT_NAME"
      -Dsonar.projectVersion=$CI_PIPELINE_ID
      -Dsonar.analysis.mode=publish
      -Dsonar.coverage.exclusions=**/node_modules/**,**/test/**,**/dist/**,**/coverage-reports/**,**/coverage/**,**/coverage-report/**,**/coverage-index.html
      -Dsonar.javascript.lcov.reportPaths=./coverage-reports/lcov.info
    - docker image rm -f $CI_PROJECT_NAME:test
    - rm -rf coverage-reports
  tags:
    - docker

build:
  stage: build
  script:
    - docker build --pull -t "$DOCKER_IMAGE:$ARG_APP_VERSION" .
  tags:
    - docker

delivery:
  stage: delivery
  script:
    - docker tag "$DOCKER_IMAGE:$ARG_APP_VERSION" "$DOCKER_IMAGE:latest"
    - docker push "$DOCKER_IMAGE:$ARG_APP_VERSION"
    - docker push "$DOCKER_IMAGE:latest"
  only:
    - tags
  tags:
    - docker
  
release-uat:
  stage: release
  script:
    - echo "deploy uat."
  only:
    - tags
    - main
  tags:
    - docker
  when: manual

release-prod:
  stage: release
  script:
    - echo "deploy prod."
  only:
    - tags
    - main
  tags:
    - docker
  when: manual

cleanup:
  stage: cleanup
  script:
    - docker rmi -f "$DOCKER_IMAGE:$ARG_APP_VERSION" "$DOCKER_IMAGE:latest"
  tags:
    - docker
  when: always
